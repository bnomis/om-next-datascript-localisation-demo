;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{class}, :name sablono.normalize, :imports nil, :requires {set clojure.set, clojure.set clojure.set, str clojure.string, clojure.string clojure.string, util sablono.util, sablono.util sablono.util}, :uses nil, :defs {compact-map {:protocol-inline nil, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/sablono/normalize.cljc", :line 7, :column 7, :end-line 7, :end-column 18, :arglists (quote ([m])), :doc "Removes all map entries where the value of the entry is empty."}, :name sablono.normalize/compact-map, :variadic false, :file "resources/public/compiled/dev/sablono/normalize.cljc", :end-column 18, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Removes all map entries where the value of the entry is empty."}, class-name {:protocol-inline nil, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/sablono/normalize.cljc", :line 17, :column 7, :end-line 17, :end-column 17, :arglists (quote ([x]))}, :name sablono.normalize/class-name, :variadic false, :file "resources/public/compiled/dev/sablono/normalize.cljc", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, class {:protocol-inline nil, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/sablono/normalize.cljc", :line 24, :column 7, :end-line 24, :end-column 12, :arglists (quote ([class])), :doc "Normalize `class` into a set of classes."}, :name sablono.normalize/class, :variadic false, :file "resources/public/compiled/dev/sablono/normalize.cljc", :end-column 12, :method-params ([class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([class])), :doc "Normalize `class` into a set of classes."}, attributes {:protocol-inline nil, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/sablono/normalize.cljc", :line 56, :column 7, :end-line 56, :end-column 17, :arglists (quote ([attrs])), :doc "Normalize the `attrs` of an element."}, :name sablono.normalize/attributes, :variadic false, :file "resources/public/compiled/dev/sablono/normalize.cljc", :end-column 17, :method-params ([attrs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([attrs])), :doc "Normalize the `attrs` of an element."}, merge-with-class {:protocol-inline nil, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/sablono/normalize.cljc", :line 63, :column 7, :end-line 63, :end-column 23, :arglists (quote ([& maps])), :doc "Like clojure.core/merge but concatenate :class entries.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}}, :name sablono.normalize/merge-with-class, :variadic true, :file "resources/public/compiled/dev/sablono/normalize.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}, :method-params [(maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 0, :fn-var true, :arglists ([& maps]), :doc "Like clojure.core/merge but concatenate :class entries."}, strip-css {:protocol-inline nil, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/sablono/normalize.cljc", :line 73, :column 7, :end-line 73, :end-column 16, :arglists (quote ([s])), :doc "Strip the # and . characters from the beginning of `s`."}, :name sablono.normalize/strip-css, :variadic false, :file "resources/public/compiled/dev/sablono/normalize.cljc", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Strip the # and . characters from the beginning of `s`."}, match-tag {:protocol-inline nil, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/sablono/normalize.cljc", :line 77, :column 7, :end-line 77, :end-column 16, :arglists (quote ([s])), :doc "Match `s` as a CSS tag and return a vector of tag name, CSS id and\n  CSS classes."}, :name sablono.normalize/match-tag, :variadic false, :file "resources/public/compiled/dev/sablono/normalize.cljc", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Match `s` as a CSS tag and return a vector of tag name, CSS id and\n  CSS classes."}, children {:protocol-inline nil, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/sablono/normalize.cljc", :line 93, :column 7, :end-line 93, :end-column 15, :arglists (quote ([x])), :doc "Normalize the children of a HTML element."}, :name sablono.normalize/children, :variadic false, :file "resources/public/compiled/dev/sablono/normalize.cljc", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Normalize the children of a HTML element."}, element {:protocol-inline nil, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/sablono/normalize.cljc", :line 106, :column 7, :end-line 106, :end-column 14, :arglists (quote ([[tag & content]])), :doc "Ensure an element vector is of the form [tag-name attrs content]."}, :name sablono.normalize/element, :variadic false, :file "resources/public/compiled/dev/sablono/normalize.cljc", :end-column 14, :method-params ([p__13828]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[tag & content]])), :doc "Ensure an element vector is of the form [tag-name attrs content]."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :content :default :id :class :tag}, :order [:else :class :tag :default :content :id]}, :doc nil}