;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{aget aclone alength amap array aset array? make-array into-array}, :name datascript.arrays, :imports nil, :requires {str clojure.string, clojure.string clojure.string}, :uses nil, :defs {if-cljs {:protocol-inline nil, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/datascript/arrays.cljc", :line 8, :column 8, :end-line 8, :end-column 15, :private true, :arglists (quote ([env then else]))}, :private true, :name datascript.arrays/if-cljs, :variadic false, :file "resources/public/compiled/dev/datascript/arrays.cljc", :end-column 15, :method-params ([env then else]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env then else]))}, make-array {:name datascript.arrays/make-array, :file "resources/public/compiled/dev/datascript/arrays.cljc", :line 11, :column 10, :end-line 11, :end-column 25, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/datascript/arrays.cljc", :line 11, :column 15, :end-line 11, :end-column 25}}, into-array {:name datascript.arrays/into-array, :file "resources/public/compiled/dev/datascript/arrays.cljc", :line 16, :column 10, :end-line 16, :end-column 25, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/datascript/arrays.cljc", :line 16, :column 15, :end-line 16, :end-column 25}}, aclone {:protocol-inline nil, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/datascript/arrays.cljc", :line 63, :column 7, :end-line 63, :end-column 13, :arglists (quote ([from]))}, :name datascript.arrays/aclone, :variadic false, :file "resources/public/compiled/dev/datascript/arrays.cljc", :end-column 13, :method-params ([from]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([from]))}, aconcat {:protocol-inline nil, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/datascript/arrays.cljc", :line 67, :column 7, :end-line 67, :end-column 14, :arglists (quote ([a b]))}, :name datascript.arrays/aconcat, :variadic false, :file "resources/public/compiled/dev/datascript/arrays.cljc", :end-column 14, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, amap {:protocol-inline nil, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/datascript/arrays.cljc", :line 75, :column 7, :end-line 75, :end-column 11, :arglists (quote ([f arr]))}, :name datascript.arrays/amap, :variadic false, :file "resources/public/compiled/dev/datascript/arrays.cljc", :end-column 11, :method-params ([f arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f arr]))}, asort {:protocol-inline nil, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/datascript/arrays.cljc", :line 79, :column 7, :end-line 79, :end-column 12, :arglists (quote ([arr cmp]))}, :name datascript.arrays/asort, :variadic false, :file "resources/public/compiled/dev/datascript/arrays.cljc", :end-column 12, :method-params ([arr cmp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr cmp]))}, array? {:name datascript.arrays/array?, :file "resources/public/compiled/dev/datascript/arrays.cljc", :line 83, :column 1, :end-line 83, :end-column 12, :meta {:file "/Users/simonb/src/clojurescript/om/om-next-datascript-localisation-demo/resources/public/compiled/dev/datascript/arrays.cljc", :line 83, :column 6, :end-line 83, :end-column 12}}}, :require-macros {datascript.arrays datascript.arrays}, :cljs.analyzer/constants {:seen #{:ns}, :order [:ns]}, :doc nil}